services:
  db:
    image: postgres:16
    container_name: usc_scheduler_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./server/database/migrations/create_users_table.sql:/docker-entrypoint-initdb.d/001_auth.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - usc_net

  api:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: usc_scheduler_api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
  # Point these at your existing database if you don't want to use the bundled "db" service
  USC_DB_HOST: ${USC_DB_HOST:-db}
  USC_DB_PORT: ${USC_DB_PORT:-5432}
  USC_DB_NAME: ${USC_DB_NAME:-usc_sched}
  USC_DB_USER: ${USC_DB_USER:-REDACTED}
  USC_DB_PASSWORD: ${USC_DB_PASSWORD:-REDACTED}
  # Optional: if your tables live outside the public schema, set a comma-separated list here
  USC_DB_SCHEMA: ${USC_DB_SCHEMA}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      SEMESTER: ${SEMESTER:-20253}
    networks:
      - usc_net

  web:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: usc_scheduler_web
    restart: unless-stopped
    depends_on:
      - api
    ports:
  - "80:80"
  - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-web:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    networks:
      - usc_net

  certbot:
    image: certbot/certbot:latest
    container_name: usc_scheduler_certbot
    volumes:
      - certbot-web:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    entrypoint: /bin/sh
    command: -c "trap 'exit 0' TERM; while :; do sleep 12h & wait $!; certbot renew --webroot -w /var/www/certbot --quiet; done"
    networks:
      - usc_net

volumes:
  pgdata:
  certbot-web:
  letsencrypt:

networks:
  usc_net:
    driver: bridge
